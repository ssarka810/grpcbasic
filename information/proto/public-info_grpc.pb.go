// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: information/proto/public-info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicInformationService_GetDetails_FullMethodName                    = "/greet.PublicInformationService/GetDetails"
	PublicInformationService_ServerStreamGetDetails_FullMethodName        = "/greet.PublicInformationService/ServerStreamGetDetails"
	PublicInformationService_ClientStreamGetDetails_FullMethodName        = "/greet.PublicInformationService/ClientStreamGetDetails"
	PublicInformationService_BiDirectionalStreamGetDetails_FullMethodName = "/greet.PublicInformationService/BiDirectionalStreamGetDetails"
)

// PublicInformationServiceClient is the client API for PublicInformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicInformationServiceClient interface {
	GetDetails(ctx context.Context, in *BasicInfo, opts ...grpc.CallOption) (*DetailedInfo, error)
	ServerStreamGetDetails(ctx context.Context, in *BasicInfo, opts ...grpc.CallOption) (PublicInformationService_ServerStreamGetDetailsClient, error)
	ClientStreamGetDetails(ctx context.Context, opts ...grpc.CallOption) (PublicInformationService_ClientStreamGetDetailsClient, error)
	BiDirectionalStreamGetDetails(ctx context.Context, opts ...grpc.CallOption) (PublicInformationService_BiDirectionalStreamGetDetailsClient, error)
}

type publicInformationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicInformationServiceClient(cc grpc.ClientConnInterface) PublicInformationServiceClient {
	return &publicInformationServiceClient{cc}
}

func (c *publicInformationServiceClient) GetDetails(ctx context.Context, in *BasicInfo, opts ...grpc.CallOption) (*DetailedInfo, error) {
	out := new(DetailedInfo)
	err := c.cc.Invoke(ctx, PublicInformationService_GetDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicInformationServiceClient) ServerStreamGetDetails(ctx context.Context, in *BasicInfo, opts ...grpc.CallOption) (PublicInformationService_ServerStreamGetDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicInformationService_ServiceDesc.Streams[0], PublicInformationService_ServerStreamGetDetails_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicInformationServiceServerStreamGetDetailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicInformationService_ServerStreamGetDetailsClient interface {
	Recv() (*DetailedInfo, error)
	grpc.ClientStream
}

type publicInformationServiceServerStreamGetDetailsClient struct {
	grpc.ClientStream
}

func (x *publicInformationServiceServerStreamGetDetailsClient) Recv() (*DetailedInfo, error) {
	m := new(DetailedInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicInformationServiceClient) ClientStreamGetDetails(ctx context.Context, opts ...grpc.CallOption) (PublicInformationService_ClientStreamGetDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicInformationService_ServiceDesc.Streams[1], PublicInformationService_ClientStreamGetDetails_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicInformationServiceClientStreamGetDetailsClient{stream}
	return x, nil
}

type PublicInformationService_ClientStreamGetDetailsClient interface {
	Send(*BasicInfo) error
	CloseAndRecv() (*DetailedInfo, error)
	grpc.ClientStream
}

type publicInformationServiceClientStreamGetDetailsClient struct {
	grpc.ClientStream
}

func (x *publicInformationServiceClientStreamGetDetailsClient) Send(m *BasicInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicInformationServiceClientStreamGetDetailsClient) CloseAndRecv() (*DetailedInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DetailedInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicInformationServiceClient) BiDirectionalStreamGetDetails(ctx context.Context, opts ...grpc.CallOption) (PublicInformationService_BiDirectionalStreamGetDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicInformationService_ServiceDesc.Streams[2], PublicInformationService_BiDirectionalStreamGetDetails_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicInformationServiceBiDirectionalStreamGetDetailsClient{stream}
	return x, nil
}

type PublicInformationService_BiDirectionalStreamGetDetailsClient interface {
	Send(*BasicInfo) error
	Recv() (*DetailedInfo, error)
	grpc.ClientStream
}

type publicInformationServiceBiDirectionalStreamGetDetailsClient struct {
	grpc.ClientStream
}

func (x *publicInformationServiceBiDirectionalStreamGetDetailsClient) Send(m *BasicInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicInformationServiceBiDirectionalStreamGetDetailsClient) Recv() (*DetailedInfo, error) {
	m := new(DetailedInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicInformationServiceServer is the server API for PublicInformationService service.
// All implementations must embed UnimplementedPublicInformationServiceServer
// for forward compatibility
type PublicInformationServiceServer interface {
	GetDetails(context.Context, *BasicInfo) (*DetailedInfo, error)
	ServerStreamGetDetails(*BasicInfo, PublicInformationService_ServerStreamGetDetailsServer) error
	ClientStreamGetDetails(PublicInformationService_ClientStreamGetDetailsServer) error
	BiDirectionalStreamGetDetails(PublicInformationService_BiDirectionalStreamGetDetailsServer) error
	mustEmbedUnimplementedPublicInformationServiceServer()
}

// UnimplementedPublicInformationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicInformationServiceServer struct {
}

func (UnimplementedPublicInformationServiceServer) GetDetails(context.Context, *BasicInfo) (*DetailedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedPublicInformationServiceServer) ServerStreamGetDetails(*BasicInfo, PublicInformationService_ServerStreamGetDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamGetDetails not implemented")
}
func (UnimplementedPublicInformationServiceServer) ClientStreamGetDetails(PublicInformationService_ClientStreamGetDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamGetDetails not implemented")
}
func (UnimplementedPublicInformationServiceServer) BiDirectionalStreamGetDetails(PublicInformationService_BiDirectionalStreamGetDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStreamGetDetails not implemented")
}
func (UnimplementedPublicInformationServiceServer) mustEmbedUnimplementedPublicInformationServiceServer() {
}

// UnsafePublicInformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicInformationServiceServer will
// result in compilation errors.
type UnsafePublicInformationServiceServer interface {
	mustEmbedUnimplementedPublicInformationServiceServer()
}

func RegisterPublicInformationServiceServer(s grpc.ServiceRegistrar, srv PublicInformationServiceServer) {
	s.RegisterService(&PublicInformationService_ServiceDesc, srv)
}

func _PublicInformationService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInformationServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicInformationService_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInformationServiceServer).GetDetails(ctx, req.(*BasicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicInformationService_ServerStreamGetDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BasicInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicInformationServiceServer).ServerStreamGetDetails(m, &publicInformationServiceServerStreamGetDetailsServer{stream})
}

type PublicInformationService_ServerStreamGetDetailsServer interface {
	Send(*DetailedInfo) error
	grpc.ServerStream
}

type publicInformationServiceServerStreamGetDetailsServer struct {
	grpc.ServerStream
}

func (x *publicInformationServiceServerStreamGetDetailsServer) Send(m *DetailedInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicInformationService_ClientStreamGetDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicInformationServiceServer).ClientStreamGetDetails(&publicInformationServiceClientStreamGetDetailsServer{stream})
}

type PublicInformationService_ClientStreamGetDetailsServer interface {
	SendAndClose(*DetailedInfo) error
	Recv() (*BasicInfo, error)
	grpc.ServerStream
}

type publicInformationServiceClientStreamGetDetailsServer struct {
	grpc.ServerStream
}

func (x *publicInformationServiceClientStreamGetDetailsServer) SendAndClose(m *DetailedInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicInformationServiceClientStreamGetDetailsServer) Recv() (*BasicInfo, error) {
	m := new(BasicInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicInformationService_BiDirectionalStreamGetDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicInformationServiceServer).BiDirectionalStreamGetDetails(&publicInformationServiceBiDirectionalStreamGetDetailsServer{stream})
}

type PublicInformationService_BiDirectionalStreamGetDetailsServer interface {
	Send(*DetailedInfo) error
	Recv() (*BasicInfo, error)
	grpc.ServerStream
}

type publicInformationServiceBiDirectionalStreamGetDetailsServer struct {
	grpc.ServerStream
}

func (x *publicInformationServiceBiDirectionalStreamGetDetailsServer) Send(m *DetailedInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicInformationServiceBiDirectionalStreamGetDetailsServer) Recv() (*BasicInfo, error) {
	m := new(BasicInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicInformationService_ServiceDesc is the grpc.ServiceDesc for PublicInformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicInformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.PublicInformationService",
	HandlerType: (*PublicInformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _PublicInformationService_GetDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamGetDetails",
			Handler:       _PublicInformationService_ServerStreamGetDetails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamGetDetails",
			Handler:       _PublicInformationService_ClientStreamGetDetails_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDirectionalStreamGetDetails",
			Handler:       _PublicInformationService_BiDirectionalStreamGetDetails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "information/proto/public-info.proto",
}
